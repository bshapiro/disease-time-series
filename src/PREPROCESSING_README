This is a preprocessing script. You can give it raw data and have it perform simple cleaning operations: scaling/whitening, logtransforming, filtering out samples/features, regressing out covariates and principal components

Overview:

--in_directory specified the directory to look for all files, use it if all your files are in one place
--out_directory specifies the output directory to save all output
--savename is the name of the preprocessed data ouput file
--saveformat is the the format to save output file: 'pickle' or 'txt' which is tab seperated

-d or --dataset flag is the filepath/filename of the data matrix file
--filetype is the filetype of -d, 'pickle' 'csv' 'tsv'
--has_row_labels, --has_col_labels boolean flags to interperet first column/row as labels
--transpose_data whether or not to transpose matrix. NOTE: as convention we take rows to be samples and columns to be features


Log Transform:
    use '-l' or '--log_transform' flag to log transform data
    use '--smoothing' to specify smoothing value to add elementwise to matrix before logtransformation (default=0)

Scaling/Whitenin:
    use '-s' or '--scale_data' flag to scale
    by default scales to mean 0 unit variance
    '--scale_axis' specifies axis to scale on 0 for rows, 1 for columns (default 0)
    '--center_off' will scale data to unit variance without centering
    '--unit_std_off' will center data without scaling

Filtering:
    use '-f' or '--filter_data' flage
    4 arguments: data, operation, threshold, axis
    -data is a pickle of an array with the values that you want to filter on
    -operation is from a list of predifined operations. right now we have '==', '>', '>=', '<', '<=' but you can add easily by adding a new operation label and corresponding lambda in make_operation method
    -threshold is a value to threshold on
    -axis is what axis to perform the filtering on: 0 for rows, 1 for columns
    - to perform multiple filterings use the '-f' flag as many times as you'd like with corresponding arguments
    -NOTE the dimension of the filter data should agree with the dimension of the axis we are filtering against

Regression:
    use the '-r' or '--regress_out' flag
    2 arguments: values to regress against, axis to do regression on
    -values are a pickle of an array/matrix you want to regress your data against
    -axis specified what axis to do the regression on 0 for rows, 1 for columns
    -NOTE: you will want the dimension of your values matrix and the axis you are regressing on to agree. DO NOT USE FLATTENED ARRAYS
    eg. if we have an n x m matrix and want to regress on axis 0 use an n x k values matrix where k is the number of covariates we are regressing out

Regressing Principal Components:
    use the '-p' flag or '--principal_component' flag
    argument is the index of the principal component you want to regress (index from 0)
    to regress multiple pcs repeat the flag

Example:
python preprocessing.py --in_directory dir -d datafile --filetype tsv --has_row_labels --has_col_labels \
 -s -f filtervals1 '==' 0 0 -f filtervals2 '<=' 3 1 -p 0 -p 1 -p 2  --out_directory outdir --savetype txt

What it does:
will use tab seperated textfile datafile in directory dir,
interperet datafile to have row and column labels
scale and center the data,
filter samples(rows, axis 0) to values where filtervals1 == 0,
filter features(columns, axis 1) to values where filtervals2 <= 3,
regress out the first three principal components,
save output file as a tab seperated text file to directory outdir